<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
  <!-- En-tête -->
  <div class="flex justify-between items-center mb-8">
    <div>
      <h1 class="text-2xl font-bold text-gray-900">Plats disponibles</h1>
      <p class="mt-1 text-sm text-gray-600">Découvrez les délicieux plats proposés par vos voisins.</p>
    </div>
    <%= link_to "Proposer un plat", new_dish_path, class: "inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-500 hover:bg-blue-600" %>
  </div>

  <!-- Barre de recherche -->
  <div class="mb-8">
    <div class="flex flex-col md:flex-row gap-4">
      <!-- Barre de recherche -->
      <div class="flex-grow">
        <div class="relative">
          <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
          </div>
          <input type="text" 
                 id="searchInput"
                 placeholder="Rechercher par nom de plat ou ingrédients..." 
                 class="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
        </div>
      </div>
    </div>
  </div>

  <!-- Message "Aucun résultat" (caché par défaut) -->
  <div id="noResults" class="hidden text-center py-8">
    <p class="text-gray-500">Aucun plat ne correspond à votre recherche.</p>
  </div>

  <!-- Grille des plats -->
  <div id="dishes-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <%= render partial: 'dishes_list', locals: { dishes: @dishes } %>
  </div>

  <!-- Pagination -->
  <% if @total_pages > 1 %>
    <div class="mt-8 flex justify-center" id="pagination">
      <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
        <% (1..@total_pages).each do |page| %>
          <button onclick="loadPage(<%= page %>)"
                  class="relative inline-flex items-center px-4 py-2 border border-gray-300 bg-white text-sm font-medium <%= page == @page ? 'text-blue-500 border-blue-500' : 'text-gray-700 hover:bg-gray-50' %>"
                  <%= 'disabled' if page == @page %>>
            <%= page %>
          </button>
        <% end %>
      </nav>
    </div>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById('searchInput');
    const dishesGrid = document.getElementById('dishes-grid');
    const noResults = document.getElementById('noResults');
    const dishes = dishesGrid.getElementsByClassName('dish-card');

    function normalizeString(str) {
      return str.toLowerCase()
               .normalize("NFD")
               .replace(/[\u0300-\u036f]/g, "")
               .trim();
    }

    function filterDishes(searchTerm) {
      searchTerm = normalizeString(searchTerm);
      let hasResults = false;

      Array.from(dishes).forEach(dish => {
        const name = normalizeString(dish.dataset.name);
        const ingredients = normalizeString(dish.dataset.ingredients || '');
        const description = normalizeString(dish.dataset.description);

        if (name.includes(searchTerm) || 
            ingredients.includes(searchTerm) || 
            description.includes(searchTerm)) {
          dish.classList.remove('hidden');
          hasResults = true;
        } else {
          dish.classList.add('hidden');
        }
      });

      // Afficher/masquer le message "Aucun résultat"
      noResults.classList.toggle('hidden', hasResults);
    }

    // Écouteur d'événement pour la recherche en temps réel
    let debounceTimeout;
    searchInput.addEventListener('input', function(e) {
      clearTimeout(debounceTimeout);
      debounceTimeout = setTimeout(() => {
        filterDishes(e.target.value);
      }, 300); // Délai de 300ms pour éviter trop d'appels
    });

    // Réinitialiser la recherche quand on change de page
    window.addEventListener('popstate', function() {
      searchInput.value = '';
      filterDishes('');
    });
  });

  // Fonction de pagination existante
  function loadPage(page) {
    const url = new URL(window.location);
    url.searchParams.set('page', page);
    window.history.pushState({}, '', url);

    const grid = document.getElementById('dishes-grid');
    grid.style.opacity = '0.5';

    fetch(`${url.pathname}?page=${page}`, {
      headers: {
        'Accept': 'text/html',
        'X-Requested-With': 'XMLHttpRequest'
      }
    })
    .then(response => response.text())
    .then(html => {
      grid.innerHTML = html;
      grid.style.opacity = '1';

      // Réinitialiser la recherche
      const searchInput = document.getElementById('searchInput');
      if (searchInput) {
        searchInput.value = '';
        const event = new Event('input');
        searchInput.dispatchEvent(event);
      }

      // Mettre à jour les boutons de pagination
      document.querySelectorAll('#pagination button').forEach(button => {
        const buttonPage = parseInt(button.textContent.trim());
        if (buttonPage === page) {
          button.classList.add('text-blue-500', 'border-blue-500');
          button.classList.remove('text-gray-700', 'hover:bg-gray-50');
          button.disabled = true;
        } else {
          button.classList.remove('text-blue-500', 'border-blue-500');
          button.classList.add('text-gray-700', 'hover:bg-gray-50');
          button.disabled = false;
        }
      });

      window.scrollTo({ top: 0, behavior: 'smooth' });
    });
  }
</script> 